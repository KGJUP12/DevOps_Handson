pipeline {
    agent any
    tools {
        jdk 'jdk-17'
        maven 'maven3'
    }
    environment { 
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Get-set Ready') {
            steps {
                echo 'Pipeline Starting........'
                echo '<---------------------GET SET READY GO------------------------->'
            }
        }
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/KGJUP12/DevOps_Handson/'
            }
        }
        stage('Compile') {
            steps {
                dir('Jenkins/Boardgame') {
                    sh 'mvn compile'
                }
            }
        }
        stage('Test') {
            steps {
                dir('Jenkins/Boardgame') {
                    sh 'mvn test'
                }
            }
        }
        stage('File System Scan') {
            steps {
                dir('Jenkins/Boardgame') {
                    sh 'trivy fs -f table -o trivy-fs-report.html .'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('Jenkins/Boardgame') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=Boardgame \
                            -Dsonar.projectKey=Boardgame \
                            -Dsonar.java.binaries=.
                        '''
                    }
                }
            }
        }
        stage('Quality Gates') {
            steps {
                dir('Jenkins/Boardgame') {
                    echo 'Quality check offline'
                        //Quality check offline
                       // waitForQualityGate abortPipeline: false, credentialsId: 'sonar-cred'
                    
                }
            }
        }
        stage('Build') {
            steps {
                dir('Jenkins/Boardgame') {
                    sh 'mvn package'
                }
            }
        }
        stage('Publish to Nexus') {
            steps {
                dir('Jenkins/Boardgame') {
                    withMaven(
                        globalMavenSettingsConfig: 'global-settings',
                        jdk: 'jdk-17',
                        maven: 'maven3',
                        mavenSettingsConfig: '',
                        traceability: true
                    ) {
                        sh 'mvn deploy'
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                dir('Jenkins/Boardgame') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                            sh 'docker build -t kavindra123/boardgame:v1 .'
                        }
                    }
                }
            }
        }
        stage('Docker Image Scan') {
            steps {
                dir('Jenkins/Boardgame') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                            sh 'trivy image --format table --output trivy-image-report.html kavindra123/boardgame:v1'
                        }
                    }
                }
            }
        }
        stage('Docker Image Push') {
            steps {
                dir('Jenkins/Boardgame') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                            sh 'docker push kavindra123/boardgame:v1'
                        }
                    }
                }
            }
        }
        stage('KUBERNETES DEPLOYMENT') {
            steps {
                    sh "cd Jenkins/Boardgame && kubectl config current-context && kubectl config use-context minikube && kubectl apply -f deployment-service.yaml --validate=false && kubectl get po" 
            }
        }
    }
}
